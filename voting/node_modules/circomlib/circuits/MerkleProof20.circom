pragma circom 2.0.0;
include "poseidon.circom";

template MerkleProof20() {
    signal input leaf;
    signal input pathElements[20];
    signal input pathIndices[20];
    signal output root;

    signal currentHash[21];
    signal oneMinus[20];
    signal left_from_hash[20];
    signal left_from_path[20];
    signal left[20];
    signal right_from_path[20];
    signal right_from_hash[20];
    signal right[20];

    component hashers[20];

    currentHash[0] <== leaf;

    for (var i = 0; i < 20; i++) {
        hashers[i] = Poseidon(2);

        oneMinus[i] <== 1 - pathIndices[i];

        left_from_hash[i] <== oneMinus[i] * currentHash[i];
        left_from_path[i] <== pathIndices[i] * pathElements[i];
        left[i] <== left_from_hash[i] + left_from_path[i];

        right_from_path[i] <== oneMinus[i] * pathElements[i];
        right_from_hash[i] <== pathIndices[i] * currentHash[i];
        right[i] <== right_from_path[i] + right_from_hash[i];

        hashers[i].inputs[0] <== left[i];
        hashers[i].inputs[1] <== right[i];

        currentHash[i + 1] <== hashers[i].out;
    }

    root <== currentHash[20];
}

